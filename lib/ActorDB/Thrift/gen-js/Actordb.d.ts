//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


declare class ActordbClient {
  input: Thrift.TJSONProtocol;
  output: Thrift.TJSONProtocol;
  seqid: number;

  constructor(input: Thrift.TJSONProtocol, output?: Thrift.TJSONProtocol);

  protocolVersion(): string;

  protocolVersion(callback: Function): void;

  login(username: string, password: string): LoginResult;

  login(username: string, password: string, callback: Function): void;

  salt(): string;

  salt(callback: Function): void;

  exec_config(sql: string): Result;

  exec_config(sql: string, callback: Function): void;

  exec_schema(sql: string): Result;

  exec_schema(sql: string, callback: Function): void;

  exec_single(actorname: string, actortype: string, sql: string, flags: string[]): Result;

  exec_single(actorname: string, actortype: string, sql: string, flags: string[], callback: Function): void;

  exec_single_param(actorname: string, actortype: string, sql: string, flags: string[], bindingvals: Val[][]): Result;

  exec_single_param(actorname: string, actortype: string, sql: string, flags: string[], bindingvals: Val[][], callback: Function): void;

  exec_multi(actors: string[], actortype: string, sql: string, flags: string[]): Result;

  exec_multi(actors: string[], actortype: string, sql: string, flags: string[], callback: Function): void;

  exec_all(actortype: string, sql: string, flags: string[]): Result;

  exec_all(actortype: string, sql: string, flags: string[], callback: Function): void;

  exec_sql(sql: string): Result;

  exec_sql(sql: string, callback: Function): void;

  exec_sql_param(sql: string, bindingvals: Val[][]): Result;

  exec_sql_param(sql: string, bindingvals: Val[][], callback: Function): void;

  actor_types(): string[];

  actor_types(callback: Function): void;

  actor_tables(actor_type: string): string[];

  actor_tables(actor_type: string, callback: Function): void;

  actor_columns(actor_type: string, actor_table: string): { [k: string]: string; };

  actor_columns(actor_type: string, actor_table: string, callback: Function): void;

  uniqid(): number;

  uniqid(callback: Function): void;
}
