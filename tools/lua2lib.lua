---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by slanska.
--- DateTime: 2018-06-12 6:27 PM
---

--[[
Command line utility to compile list of .lua files to .obj format (using luajit -b)
and then bundle all files to a static library to be linked with C/C++ project
]]

if not jit then
    error 'This No jit found. Ensure that script is run by LuaJIT, not regular Lua'
end

local os = require 'os'
local path = require 'pl.path'
local lapp = require 'pl.lapp'
local stringx = require 'pl.stringx'

local cli_args = lapp [[
Compile lua-to-static-library
<filelist> (string)  Path to file list .lua module
    -n, --name (string default 'luaModules.a')  Name of target library
    -o, --output (string default 'obj_lua')  Output path
]]

---@param cmd string
local function os_execute(cmd)
    local result, msg, code = os.execute(cmd)
    if result == nil then
        error(string.format('Error executing command [%s]: code %s', cmd, code))
    end
end

local file_list = path.abspath(path.relpath(cli_args.filelist))

--local files = require(cli_args.filelist)
local files = loadfile(file_list)()

local libName = path.splitext(path.basename(cli_args.name))

local out_path = path.join(path.abspath(cli_args.output), libName)

if jit.os == 'Windows' then
    os.execute(string.format('mkdir "%s"', out_path))
else
    os.execute(string.format('mkdir -p "%s"', out_path))
end

for file_name, module_name in pairs(files) do
    -- Compile .lua file
    local nn = ''
    if type(file_name) ~= 'number'
            and type(module_name) == 'string' and module_name ~= '' then
        nn = 'n ' .. module_name
    else
        file_name = module_name
    end

    local cmd

    -- Current directory is expected to be flexilite
    local file_path = path.abspath(path.relpath(file_name))
    local _, ext = path.splitext(file_path)
    if ext ~= '.lua' then
        -- Non Lua files are treated as string resources (e.g. SQL files)
        -- Read file content
        local in_file = io.open(file_path, 'r')
        local res_str = in_file:read("*all")
        in_file:close()

        -- Encode it as string
        local code = string.format('return %s', stringx.quote_string(res_str))

        -- Save as temp file
        local file_path = os.tmpname()
        local tmp_file = io.open(file_path, 'w')

        tmp_file:write(code)
        tmp_file:close()

        -- Compile to .o
        local o_file = path.abspath(path.join(out_path, path.relpath(
                string.gsub(string.gsub(file_name, '/', '.'),
                        '%.%.%.', '') .. '.o')))

        cmd = string.format('luajit -b%s "%s" "%s"',
                nn, file_path, o_file)

        print(string.format('%s: compiling %s', libName, file_name))

        os_execute(cmd)

        --Delete temp file
        os.remove(file_path)
    else
        -- Compile to .o
        local o_file = path.abspath(path.join(out_path, path.relpath(
                string.gsub(string.gsub(file_name, '/', '.'),
                        '%.%.%.', '') .. '.o')))
        cmd = string.format('luajit -b%s "%s" "%s"',
                nn, file_path, o_file)

        print(string.format('%s: compiling %s', libName, file_name))

        os_execute(cmd)
    end
end

-- Bundle library into single archive
local ar_path = 'ar'
if jit.os == 'Windows' then
    -- Expect hard coded path for MinGW
    ar_path = 'c:\\MinGW\\bin\\ar.exe'
end
local cmd = string.format('%s rcus %s %s/*.o', ar_path, path.join(out_path, cli_args.name), out_path)
os_execute(cmd)

